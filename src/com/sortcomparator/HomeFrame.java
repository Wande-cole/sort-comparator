/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sortcomparator;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author WANDE
 */
public class HomeFrame extends javax.swing.JFrame {

    private JFileChooser myFile;

    /**
     * Creates new form HomeFrame
     */
    public HomeFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dataSizeField = new javax.swing.JTextField();
        generateData = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        selectionSortPath = new javax.swing.JTextField();
        selectionSortBrowse = new javax.swing.JButton();
        selectionSortBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        bubbleSortPath = new javax.swing.JTextField();
        bubbleSortBrowse = new javax.swing.JButton();
        bubbleSortBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        insertionSortPath = new javax.swing.JTextField();
        insertionSortBrowse = new javax.swing.JButton();
        insertionSortBtn = new javax.swing.JButton();
        heapSortBrowse = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        heapSortBtn = new javax.swing.JButton();
        heapSortPath = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        pancakeSortBrowse = new javax.swing.JButton();
        pancakeSortBtn = new javax.swing.JButton();
        pancakeSortPath = new javax.swing.JTextField();
        shellSortBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        shellSortPath = new javax.swing.JTextField();
        shellSortBrowse = new javax.swing.JButton();
        cocktailSortPath = new javax.swing.JTextField();
        cocktailSortBtn = new javax.swing.JButton();
        cocktailSortBrowse = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        gnomeSortBrowse = new javax.swing.JButton();
        gnomeSortBtn = new javax.swing.JButton();
        gnomeSortPath = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        resetBtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        programStatus = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sort Comaparator");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(194, 226, 255));

        jLabel1.setText("Numeric data size");

        dataSizeField.setToolTipText("Enter a number e.g 100,000");

        generateData.setText("Generate");
        generateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateDataActionPerformed(evt);
            }
        });

        jLabel2.setText("Selection sort");

        selectionSortPath.setEditable(false);

        selectionSortBrowse.setText("Browse");
        selectionSortBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionSortBrowseActionPerformed(evt);
            }
        });

        selectionSortBtn.setText("Sort");
        selectionSortBtn.setEnabled(false);
        selectionSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionSortBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Bubble sort");

        bubbleSortPath.setEditable(false);

        bubbleSortBrowse.setText("Browse");
        bubbleSortBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubbleSortBrowseActionPerformed(evt);
            }
        });

        bubbleSortBtn.setText("Sort");
        bubbleSortBtn.setEnabled(false);
        bubbleSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubbleSortBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Insertion sort");

        insertionSortPath.setEditable(false);

        insertionSortBrowse.setText("Browse");
        insertionSortBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertionSortBrowseActionPerformed(evt);
            }
        });

        insertionSortBtn.setText("Sort");
        insertionSortBtn.setEnabled(false);
        insertionSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertionSortBtnActionPerformed(evt);
            }
        });

        heapSortBrowse.setText("Browse");
        heapSortBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heapSortBrowseActionPerformed(evt);
            }
        });

        jLabel5.setText("Heap sort");

        heapSortBtn.setText("Sort");
        heapSortBtn.setEnabled(false);
        heapSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heapSortBtnActionPerformed(evt);
            }
        });

        heapSortPath.setEditable(false);

        jLabel6.setText("Pancake sort");

        pancakeSortBrowse.setText("Browse");
        pancakeSortBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pancakeSortBrowseActionPerformed(evt);
            }
        });

        pancakeSortBtn.setText("Sort");
        pancakeSortBtn.setEnabled(false);
        pancakeSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pancakeSortBtnActionPerformed(evt);
            }
        });

        pancakeSortPath.setEditable(false);

        shellSortBtn.setText("Sort");
        shellSortBtn.setEnabled(false);
        shellSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shellSortBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("Shell sort");

        shellSortPath.setEditable(false);

        shellSortBrowse.setText("Browse");
        shellSortBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shellSortBrowseActionPerformed(evt);
            }
        });

        cocktailSortPath.setEditable(false);

        cocktailSortBtn.setText("Sort");
        cocktailSortBtn.setEnabled(false);
        cocktailSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cocktailSortBtnActionPerformed(evt);
            }
        });

        cocktailSortBrowse.setText("Browse");
        cocktailSortBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cocktailSortBrowseActionPerformed(evt);
            }
        });

        jLabel8.setText("Cocktail sort");

        jLabel9.setText("Gnome sort");

        gnomeSortBrowse.setText("Browse");
        gnomeSortBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gnomeSortBrowseActionPerformed(evt);
            }
        });

        gnomeSortBtn.setText("Sort");
        gnomeSortBtn.setEnabled(false);
        gnomeSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gnomeSortBtnActionPerformed(evt);
            }
        });

        gnomeSortPath.setEditable(false);

        resultArea.setEditable(false);
        resultArea.setColumns(20);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Results");

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        jLabel11.setText("Status:");

        programStatus.setText("OK");

        jLabel12.setForeground(new java.awt.Color(0, 0, 204));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Sort type");

        jLabel13.setForeground(new java.awt.Color(0, 0, 204));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Start time");

        jLabel14.setForeground(new java.awt.Color(0, 0, 204));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("End time");

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dataSizeField)
                        .addGap(18, 18, 18)
                        .addComponent(generateData, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(programStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(selectionSortPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectionSortBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(selectionSortBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(gnomeSortPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gnomeSortBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(gnomeSortBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(bubbleSortPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bubbleSortBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(bubbleSortBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(insertionSortPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(insertionSortBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(insertionSortBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(heapSortPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(heapSortBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(heapSortBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(pancakeSortPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pancakeSortBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(pancakeSortBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(shellSortPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(shellSortBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(shellSortBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(cocktailSortPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cocktailSortBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(cocktailSortBtn))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dataSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateData))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectionSortPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectionSortBrowse)
                    .addComponent(selectionSortBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(bubbleSortPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bubbleSortBrowse)
                    .addComponent(bubbleSortBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(insertionSortPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertionSortBrowse)
                    .addComponent(insertionSortBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(heapSortPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heapSortBrowse)
                    .addComponent(heapSortBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(pancakeSortPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pancakeSortBrowse)
                    .addComponent(pancakeSortBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(shellSortPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shellSortBrowse)
                    .addComponent(shellSortBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cocktailSortPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocktailSortBrowse)
                    .addComponent(cocktailSortBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(gnomeSortPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gnomeSortBrowse)
                    .addComponent(gnomeSortBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetBtn)
                    .addComponent(jLabel11)
                    .addComponent(programStatus)
                    .addComponent(saveBtn))
                .addContainerGap())
        );

        jMenu2.setText("Info");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void selectionSortBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionSortBrowseActionPerformed
        browseFile("selection");
    }//GEN-LAST:event_selectionSortBrowseActionPerformed

    private void generateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateDataActionPerformed
        if (!"".equals(dataSizeField.getText())) {
            try {
                int dataSize = Integer.parseInt(dataSizeField.getText());
                if (dataSize > 0) {
                    String filename = JOptionPane.showInputDialog(null, "Enter a file name");
                    if (!"".equals(filename)) {
                        simData mySim = new simData();
                        int[] myArray = mySim.generate(dataSize);
                        if (mySim.writeFile(filename, myArray)) {
                            programStatus.setText("Numeric data file created succesfully");
                            programStatus.setForeground(Color.blue);
                        } else {
                            programStatus.setText("Numeric data file creation failed");
                            programStatus.setForeground(Color.red);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "You have to give your file a name");
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error: Please input a number e.g 100,000");
                dataSizeField.setText("");
            }
        } else {
            programStatus.setText("Enter a numeric data size");
            programStatus.setForeground(Color.red);
            dataSizeField.setBackground(Color.pink);
        }
    }//GEN-LAST:event_generateDataActionPerformed

    private void selectionSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionSortBtnActionPerformed
        String dataPath = selectionSortPath.getText();
        sortStub(dataPath, "Selection");
    }//GEN-LAST:event_selectionSortBtnActionPerformed

    private void bubbleSortBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubbleSortBrowseActionPerformed
        browseFile("bubble");
    }//GEN-LAST:event_bubbleSortBrowseActionPerformed

    private void insertionSortBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertionSortBrowseActionPerformed
        browseFile("insertion");
    }//GEN-LAST:event_insertionSortBrowseActionPerformed

    private void heapSortBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heapSortBrowseActionPerformed
        browseFile("heap");
    }//GEN-LAST:event_heapSortBrowseActionPerformed

    private void pancakeSortBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pancakeSortBrowseActionPerformed
        browseFile("pancake");
    }//GEN-LAST:event_pancakeSortBrowseActionPerformed

    private void shellSortBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shellSortBrowseActionPerformed
        browseFile("shell");
    }//GEN-LAST:event_shellSortBrowseActionPerformed

    private void cocktailSortBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cocktailSortBrowseActionPerformed
        browseFile("cocktail");
    }//GEN-LAST:event_cocktailSortBrowseActionPerformed

    private void gnomeSortBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gnomeSortBrowseActionPerformed
        browseFile("gnome");
    }//GEN-LAST:event_gnomeSortBrowseActionPerformed

    private void bubbleSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubbleSortBtnActionPerformed
        String dataPath = selectionSortPath.getText();
        sortStub(dataPath, "Bubble");
    }//GEN-LAST:event_bubbleSortBtnActionPerformed

    private void insertionSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertionSortBtnActionPerformed
        String dataPath = insertionSortPath.getText();
        sortStub(dataPath, "Insertion");
    }//GEN-LAST:event_insertionSortBtnActionPerformed

    private void heapSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heapSortBtnActionPerformed
        String dataPath = heapSortPath.getText();
        sortStub(dataPath, "Heap");
    }//GEN-LAST:event_heapSortBtnActionPerformed

    private void pancakeSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pancakeSortBtnActionPerformed
        String dataPath = pancakeSortPath.getText();
        sortStub(dataPath, "Pancake");
    }//GEN-LAST:event_pancakeSortBtnActionPerformed

    private void shellSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shellSortBtnActionPerformed
        String dataPath = shellSortPath.getText();
        sortStub(dataPath, "Shell");
    }//GEN-LAST:event_shellSortBtnActionPerformed

    private void cocktailSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cocktailSortBtnActionPerformed
        String dataPath = cocktailSortPath.getText();
        sortStub(dataPath, "Cocktail");
    }//GEN-LAST:event_cocktailSortBtnActionPerformed

    private void gnomeSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gnomeSortBtnActionPerformed
        String dataPath = gnomeSortPath.getText();
        sortStub(dataPath, "Gnome");
    }//GEN-LAST:event_gnomeSortBtnActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        About aboutPage = new About();
        aboutPage.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        selectionSortPath.setText("");
        selectionSortBtn.setEnabled(false);
        bubbleSortPath.setText("");
        bubbleSortBtn.setEnabled(false);
        insertionSortPath.setText("");
        insertionSortBtn.setEnabled(false);
        heapSortPath.setText("");
        heapSortBtn.setEnabled(false);
        pancakeSortPath.setText("");
        pancakeSortBtn.setEnabled(false);
        shellSortPath.setText("");
        shellSortBtn.setEnabled(false);
        cocktailSortPath.setText("");
        cocktailSortBtn.setEnabled(false);
        gnomeSortPath.setText("");
        gnomeSortBtn.setEnabled(false);
        
        resultArea.setText("");
        dataSizeField.setText("");
        dataSizeField.setBackground(Color.white);
    }//GEN-LAST:event_resetBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        simData mySim = new simData();
        Sorter mySort = new Sorter();
        mySim.writeFile("result-" + mySort.getTimeString() , resultArea.getText());
    }//GEN-LAST:event_saveBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
		//</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bubbleSortBrowse;
    private javax.swing.JButton bubbleSortBtn;
    private javax.swing.JTextField bubbleSortPath;
    private javax.swing.JButton cocktailSortBrowse;
    private javax.swing.JButton cocktailSortBtn;
    private javax.swing.JTextField cocktailSortPath;
    private javax.swing.JTextField dataSizeField;
    private javax.swing.JButton generateData;
    private javax.swing.JButton gnomeSortBrowse;
    private javax.swing.JButton gnomeSortBtn;
    private javax.swing.JTextField gnomeSortPath;
    private javax.swing.JButton heapSortBrowse;
    private javax.swing.JButton heapSortBtn;
    private javax.swing.JTextField heapSortPath;
    private javax.swing.JButton insertionSortBrowse;
    private javax.swing.JButton insertionSortBtn;
    private javax.swing.JTextField insertionSortPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton pancakeSortBrowse;
    private javax.swing.JButton pancakeSortBtn;
    private javax.swing.JTextField pancakeSortPath;
    private javax.swing.JLabel programStatus;
    private javax.swing.JButton resetBtn;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton selectionSortBrowse;
    private javax.swing.JButton selectionSortBtn;
    private javax.swing.JTextField selectionSortPath;
    private javax.swing.JButton shellSortBrowse;
    private javax.swing.JButton shellSortBtn;
    private javax.swing.JTextField shellSortPath;
    // End of variables declaration//GEN-END:variables

    private int[] getNumericData(String dataPath) {
        int[] numericData = null;
        try {
            FileReader readDataFile = new FileReader(new File(dataPath));
            BufferedReader readDataBuffer = new BufferedReader(readDataFile);
            String strData = readDataBuffer.readLine();
            String[] strDataArr = strData.split(",");
            numericData = new int[strDataArr.length];
            for (int i = 0; i < strDataArr.length; i++) {
                numericData[i] = Integer.parseInt(strDataArr[i]);
            }

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Error: File path doesn't exist");
            programStatus.setText("Error: File path doesn't exist");
            programStatus.setForeground(Color.red);
            numericData = null;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error: Could not read from file");
            programStatus.setText("Error: Could not read from file");
            programStatus.setForeground(Color.red);
            numericData = null;
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Error: The contents of this file does not suit this program");
            programStatus.setText("Error: Unfit file");
            programStatus.setForeground(Color.red);
            numericData = null;
        }
        return numericData;
    }

    public void setResultArea(String content) {
        resultArea.setText(resultArea.getText() + "\n" + content);
    }

    private void browseFile(String sortType) {
        myFile = new JFileChooser();
        myFile.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = myFile.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = myFile.getSelectedFile();
            if ("selection".equals(sortType)) {
                selectionSortPath.setText(selectedFile.getAbsolutePath());
                selectionSortBtn.setEnabled(true);
            } else if ("bubble".equals(sortType)) {
                bubbleSortPath.setText(selectedFile.getAbsolutePath());
                bubbleSortBtn.setEnabled(true);
            } else if ("insertion".equals(sortType)) {
                insertionSortPath.setText(selectedFile.getAbsolutePath());
                insertionSortBtn.setEnabled(true);
            } else if ("heap".equals(sortType)) {
                heapSortPath.setText(selectedFile.getAbsolutePath());
                heapSortBtn.setEnabled(true);
            } else if ("pancake".equals(sortType)) {
                pancakeSortPath.setText(selectedFile.getAbsolutePath());
                pancakeSortBtn.setEnabled(true);
            } else if ("shell".equals(sortType)) {
                shellSortPath.setText(selectedFile.getAbsolutePath());
                shellSortBtn.setEnabled(true);
            } else if ("cocktail".equals(sortType)) {
                cocktailSortPath.setText(selectedFile.getAbsolutePath());
                cocktailSortBtn.setEnabled(true);
            } else if ("gnome".equals(sortType)) {
                gnomeSortPath.setText(selectedFile.getAbsolutePath());
                gnomeSortBtn.setEnabled(true);
            }
        }
    }

    private void sortStub(String dataPath, String sortType) {
        int[] numericData = getNumericData(dataPath);
        int dataSize = numericData.length;
        if (numericData != null) {
            programStatus.setText("Working...");
            programStatus.setForeground(Color.blue);
            Sorter mySort = new Sorter();
            String starttime = mySort.getTime();
            int[] sortedArr = null;
            if ("Selection".equals(sortType)) {
                sortedArr = mySort.selection(numericData);
            } else if ("Bubble".equals(sortType)) {
                sortedArr = mySort.bubble(numericData);
            } else if ("Insertion".equals(sortType)) {
                sortedArr = mySort.bubble(numericData);
            } else if ("Heap".equals(sortType)) {
                sortedArr = mySort.bubble(numericData);
            } else if ("Pancake".equals(sortType)) {
                sortedArr = mySort.bubble(numericData);
            } else if ("Shell".equals(sortType)) {
                sortedArr = mySort.shell(numericData);
            } else if ("Cocktail".equals(sortType)) {
                sortedArr = mySort.cocktail(numericData);
            } else if ("Gnome".equals(sortType)) {
                sortedArr = mySort.gnome(numericData);
            }
            String stoptime = mySort.getTime();
            setResultArea(sortType + " sort\t\t" + starttime + "\t\t" + stoptime + "\n(Data size: " + numericData.length + ")\n-------------------------------------------------------------");
            simData mySim = new simData();
            mySim.writeFile(sortType + "-" + dataSize + "-sorted-" + mySort.getTimeString(), sortedArr);
            programStatus.setText("Success: " + sortType + " sort");
            programStatus.setForeground(Color.blue);
        }
    }
}
